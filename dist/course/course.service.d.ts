import { CourseDto, ModuleDto, ResponseDto, UpdateCourseDto, UpdateCourseProgress } from '../dto';
import { PrismaService } from '../prisma/prisma.service';
export declare class CourseService {
    private prisma;
    constructor(prisma: PrismaService);
    getCourseReport(courseId: any): Promise<any>;
    deletePostComment(postId: any, commentId: any): Promise<ResponseDto>;
    getPostComments(postId: any): Promise<any>;
    createPostComment(postId: any, userId: any, body: any): Promise<ResponseDto>;
    updatePostComment(postId: string, commentId: any, body: any): Promise<ResponseDto>;
    deletePost(id: string): Promise<ResponseDto>;
    getPost(postId: any): Promise<any>;
    getAllPosts(courseId: any): Promise<any>;
    createPost(courseId: any, userId: any, body: any): Promise<ResponseDto>;
    updatePost(id: string, body: UpdateCourseDto): Promise<ResponseDto>;
    createCourse(body: CourseDto): Promise<ResponseDto>;
    createModule(body: ModuleDto): Promise<ResponseDto>;
    createChapter(body: ModuleDto): Promise<ResponseDto>;
    createSection(body: ModuleDto): Promise<ResponseDto>;
    getCourse(id: string): Promise<ResponseDto>;
    getModule(id: string): Promise<ResponseDto>;
    getChapter(id: string): Promise<ResponseDto>;
    getSection(id: string): Promise<ResponseDto>;
    getAllCourses(): Promise<ResponseDto>;
    getAllModules(id: string): Promise<ResponseDto>;
    getAllUserModules(id: string): Promise<ResponseDto>;
    getAllChapters(id: string): Promise<ResponseDto>;
    getAllSections(id: string): Promise<ResponseDto>;
    getAllUserSections(id: string, userId: string, courseId: string): Promise<ResponseDto>;
    updateCourse(id: string, body: UpdateCourseDto): Promise<ResponseDto>;
    updateModule(id: string, body: UpdateCourseDto): Promise<ResponseDto>;
    updateChapter(id: string, body: UpdateCourseDto): Promise<ResponseDto>;
    updateSection(id: string, body: UpdateCourseDto): Promise<ResponseDto>;
    deleteCourse(id: string): Promise<ResponseDto>;
    deleteModule(id: string): Promise<ResponseDto>;
    deleteChapter(id: string): Promise<ResponseDto>;
    deleteSection(id: string): Promise<ResponseDto>;
    assignCourse(userId: string, courseId: string): Promise<ResponseDto>;
    getAllAssignedCourses(userId: string): Promise<ResponseDto>;
    updateUserChapterProgress(userId: string, body: UpdateCourseProgress): Promise<ResponseDto>;
    getUserChapterProgress(userId: string, courseId: string, chapterId: string): Promise<ResponseDto>;
    getLastSeenSection(userId: string, chapterId: string): Promise<ResponseDto>;
    updateLastSeenSection(userId: string, chapterId: string, sectionId: string): Promise<ResponseDto>;
}
