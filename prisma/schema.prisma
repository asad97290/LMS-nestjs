generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  email           String            @unique
  phone           String?
  photo           String?
  password        String
  role            Role
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  courses         Course[]          @relation("CourseToUser")
  LastSeenSection LastSeenSection[]
  ForumThread     ForumThread[]

  @@index([email])
  @@map("users")
}

model Course {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  image       String
  overview    String
  duration    String
  assessment  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  modules     Module[]
  users       User[]   @relation("CourseToUser")

  @@map("courses")
}

model Module {
  id          String    @id @default(uuid())
  title       String
  description String
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id])

  @@map("modules")
}

model Chapter {
  id              String            @id @default(uuid())
  title           String
  description     String
  moduleId        String
  quizId          String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  module          Module            @relation(fields: [moduleId], references: [id])
  quizzes         Quiz[]
  sections        Section[]
  LastSeenSection LastSeenSection[]

  @@map("chapters")
}

model Section {
  id              String            @id @default(uuid())
  title           String
  description     String
  chapterId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chapter         Chapter           @relation(fields: [chapterId], references: [id])
  LastSeenSection LastSeenSection[]

  @@map("sections")
}

model UserCourseProgress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  chapterId String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId, chapterId, sectionId])
}

model Quiz {
  id        String   @id @default(uuid())
  question  String   @unique
  options   String[]
  answer    String
  chapterId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter? @relation(fields: [chapterId], references: [id])

  @@map("quizzes")
}

model QuizAnswer {
  id              String   @id @default(uuid())
  quizId          String
  userId          String
  chapterId       String
  answer          String
  isAnswerCorrect Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, quizId])
  @@map("quiz_answers")
}

model LastSeenSection {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])

  @@unique([userId, chapterId])
}

model ForumThread {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  status    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("forum_threads")
}

enum Role {
  admin
  user
}

