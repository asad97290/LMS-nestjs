generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  email                 String                  @unique
  phone                 String?
  photo                 String?
  timezone              String?
  password              String
  role                  Role
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  courses               Course[]                @relation("CourseToUser")
  LastSeenSection       LastSeenSection[]
  ForumThread           ForumThread[]
  ForumComment          ForumComment[]
  Post                  Post[]
  Comment               Comment[]
  PoliciesAndProcedures PoliciesAndProcedures[]
  todos                 TodoItem[]
  FavoriteForumThread   FavoriteForumThread[]
  ThreadSubscription    ThreadSubscription[]
  Notification          Notification[]

  @@index([email])
  @@map("users")
}

model TodoItem {
  id          String   @id @default(uuid())
  title       String?
  content     String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Course {
  id                 String               @id @default(uuid())
  title              String               @unique
  description        String
  image              String
  overview           String
  duration           String
  assessment         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  modules            Module[]
  users              User[]               @relation("CourseToUser")
  Post               Post[]
  syllabusOverview   String
  resourcesOverview  String
  assessments        Json[]
  resources          Json[]
  syllabus           Json[]
  UserCourseProgress UserCourseProgress[]

  @@map("courses")
}

model Module {
  id          String    @id @default(uuid())
  title       String
  description String
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id])

  @@map("modules")
}

model Chapter {
  id                 String               @id @default(uuid())
  title              String
  description        String
  pdfFile            String
  moduleId           String
  quizId             String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  module             Module               @relation(fields: [moduleId], references: [id])
  quizzes            Quiz[]
  sections           Section[]
  LastSeenSection    LastSeenSection[]
  QuizAnswer         QuizAnswer[]
  UserCourseProgress UserCourseProgress[]

  @@map("chapters")
}

model PoliciesAndProcedures {
  id         String @id @default(uuid())
  policiesId String @unique
  user       User   @relation(fields: [userId], references: [id])
  userId     String
}

model Section {
  id              String            @id @default(uuid())
  title           String
  description     String
  chapterId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chapter         Chapter           @relation(fields: [chapterId], references: [id])
  LastSeenSection LastSeenSection[]

  @@map("sections")
}

model UserCourseProgress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  chapterId String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id])
  Course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, chapterId, sectionId])
}

model Quiz {
  id        String   @id @default(uuid())
  question  String   @unique
  options   String[]
  answer    String
  chapterId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter? @relation(fields: [chapterId], references: [id])

  @@map("quizzes")
}

model QuizAnswer {
  id              String   @id @default(uuid())
  quizId          String
  userId          String
  chapterId       String
  answer          String
  isAnswerCorrect Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Chapter         Chapter  @relation(fields: [chapterId], references: [id])

  @@unique([userId, quizId])
  @@map("quiz_answers")
}

model LastSeenSection {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  moduleId  String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])

  @@unique([userId, chapterId])
}

model ForumThread {
  id                  String                @id @default(uuid())
  title               String
  content             String
  userId              String
  status              String
  user                User                  @relation(fields: [userId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ForumComment        ForumComment[]
  FavoriteForumThread FavoriteForumThread[]
  ThreadSubscription  ThreadSubscription[]
  Notification        Notification[]

  @@map("forum_threads")
}

model ForumComment {
  id        String      @id @default(uuid())
  content   String
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  threadId  String
  thread    ForumThread @relation(fields: [threadId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("forum_comments")
}

model FavoriteForumThread {
  id        String   @id @default(uuid())
  userId    String
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  thread ForumThread @relation(fields: [threadId], references: [id])

  @@unique([userId, threadId])
  @@map("favorite_forum_threads")
}

model ThreadSubscription {
  id        String   @id @default(uuid())
  userId    String
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  thread ForumThread @relation(fields: [threadId], references: [id])

  @@unique([userId, threadId])
  @@map("thread_subscriptions")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  threadId  String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  thread ForumThread @relation(fields: [threadId], references: [id])

  @@map("notifications")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[] // Each post can have multiple comments
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

enum Role {
  admin
  user
}
